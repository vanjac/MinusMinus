[ Comments are surrounded by square brackets ];
[ and end in semicolons ];

[ Define a new variable and set it to a value ];
2 var$;

[ Get the value of the variable ];
[ (will be printed after program completion) ];
var^

[ Set variable "var" to 3 ];
( var : 3 );
[ Get value of "var" ];
var^

[ Math: ];
[ Every operation must have its own set of parenthesis. ];
[ That applies for every command using infix notation, ];
[ including variable assignments. ];
[ Whitespace must surround the numbers, infix operators, and ];
[ open parenthesis ];
( 2 + ( ( 3 - 4 ) / 5 ) )  [ equals 1.8 ];


[ Define a function that takes arguments and returns a value... ];

[ Define the variable that will hold the function ];
0 functionName$;

[ Store a function (surrounded by square brackets) in the variable. ];
[ This function takes two arguments and subtracts them ];
( functionName : [
	[ Function arguments, in reverse order ];
	arg2$;
	arg1$;
	( arg1^ - arg2^ )  [ no semicolon = return value ];
] );

[ Call the function ];
( functionName^ ! 2 3 )


[ Conditional ];
( 1 ? 2 3 )
( 0 ? 2 3 )
[ Check if value is negative ];
( -1 | ? 2 3 )
( 0 | ? 2 3 )


[ Recursion is possible... ];

0 factorial$;

( factorial : [
	num$;
	( ( ( num^ - 2 ) | ? [
	    1
	] [
	    ( ( factorial^ ! ( num^ - 1 ) ) * num^ )
	] ) ! )
] );

( factorial^ ! 4 )

